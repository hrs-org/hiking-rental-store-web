name: CI Pipeline

on:
  pull_request:
    branches: [develop]
  push:
    branches: [develop]
  release:
    types: [published]

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write
  checks: write

env:
  NODE_VERSION: '18.20.4'
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_PROJECT_KEY: feri-nus-iss_hiking-rental-store-web
  SONAR_ORGANIZATION: feri-nus-iss

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: github.event_name != 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache npm packages
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build:prod

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            node_modules/
          retention-days: 1

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Create coverage directory
        run: mkdir -p ./coverage

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ./coverage/
          retention-days: 1

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name != 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: ./coverage

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

  lint:
    name: Code Formatting & Style
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run ESLint
        run: npm run lint

      - name: Verify code formatting
        run: npm run format:check

  docker-build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, test, code-quality, security-scan, lint]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/hrs-web:develop
            ${{ secrets.DOCKER_USERNAME }}/hrs-web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dast:
    name: DAST Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull and run Docker image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/hrs-web:${{ github.sha }}
          docker run -d -p 4200:80 --name hrs-web \
            ${{ secrets.DOCKER_USERNAME }}/hrs-web:${{ github.sha }}
          sleep 30

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:4200'

      - name: Stop application
        if: always()
        run: docker stop hrs-web

  production-build:
    name: Production Docker Release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Get commit SHA for release
        id: commit
        run: echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Re-tag existing image for production
        run: |
          # Pull the exact image that was built from this commit SHA
          docker pull ${{ secrets.DOCKER_USERNAME }}/hrs-web:${{ steps.commit.outputs.SHA }}

          # Re-tag it for production
          docker tag ${{ secrets.DOCKER_USERNAME }}/hrs-web:${{ steps.commit.outputs.SHA }} ${{ secrets.DOCKER_USERNAME }}/hrs-web:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/hrs-web:${{ steps.commit.outputs.SHA }} ${{ secrets.DOCKER_USERNAME }}/hrs-web:${{ steps.version.outputs.VERSION }}

          # Push the new tags
          docker push ${{ secrets.DOCKER_USERNAME }}/hrs-web:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/hrs-web:${{ steps.version.outputs.VERSION }}

      - name: Production release summary
        run: |
          echo "🚀 Production release completed!"
          echo "📦 Source image: hrs-web:${{ steps.commit.outputs.SHA }}"
          echo "🏷️ New tags created:"
          echo "   - hrs-web:latest"
          echo "   - hrs-web:${{ steps.version.outputs.VERSION }}"
          echo "🔧 Environment: production"
          echo "🗄️ Uses production environment configuration"
